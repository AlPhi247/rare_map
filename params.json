{"name":"Rare map","tagline":"Translate legacy db to ActiveRecord models","body":"rare_map\r\n=============\r\n\r\nRelational db to ActiveREcord models MAPper\r\n\r\nRareMap can be used for BOTH standalone application & Rails\r\n\r\n#### Installation:\r\n```ruby\r\ngem install rare_map\r\n```\r\n\r\nBasic RareMap Usage\r\n-------------\r\n\r\n#### Standalone:\r\nCreate a new rare_map.yml with following lines in the root of your application\r\n\r\n#### Rails:\r\nCreate a new config/rare_map.yml with following lines in rails\r\n\r\nrare_map.yml:\r\n```yaml\r\n  legacy:\r\n    adapter: sqlite3\r\n    database: db/db1.sqlite3\r\n\r\n  old_db:\r\n    adapter: mysql2\r\n    host: localhost\r\n    database: db_name\r\n    port: 3306\r\n    username: user\r\n    password: pw\r\n```\r\n\r\nRun following command in the root of your application or rails\r\n```\r\n$ raremap\r\n```\r\n\r\nStandalone: A demo.rb example is generated for you in the root of your application\r\n\r\nRareMap console which is like rails console for standalone app can be run by following command\r\n```\r\n$ raremap console  # or simply run `raremap c`\r\n```\r\n\r\nAdvanced RareMap Usage\r\n-------------\r\n\r\n#### Seperate databases into groups (highly recommended)\r\n```yaml\r\n  her_group:\r\n    -\r\n      db1:\r\n        adapter: sqlite3\r\n        database: db/db1.sqlite3\r\n    -\r\n      db2:\r\n        adapter: sqlite3\r\n        database: db/db1.sqlite3\r\n\r\n  his_group:\r\n    -\r\n      db1:\r\n        adapter: sqlite3\r\n        database: db/db3.sqlite3\r\n    -\r\n      db2:\r\n        adapter: sqlite3\r\n        database: db/db4.sqlite3\r\n````\r\n\r\nThere are benefits by separating databases into groups:\r\n\r\n1. Associations are built between databases within a group\r\n\r\n2. Group name is treated as a module namespace\r\n\r\n3. Models of a group are organized within a folder\r\n\r\nIf all your data reside in several legacy databases, it is important to build back those associations across databases\r\n\r\nIf there are 2 or more tables with the same name, giving them group names could avoid naming collision\r\n\r\nIf there are tons of tables, it is better to organize them well\r\n\r\n\r\n#### Set up RareMap Options\r\n```yaml\r\n  rare_map_opts:\r\n    foreign_key:\r\n      suffix: fk\r\n      alias:\r\n        abnormal_fk1: table1\r\n        abnormal_fk2: table2\r\n    primary_key:\r\n      table1: abnormal_pk\r\n```\r\n\r\n* rare_map_opts[foreign_key][suffix]: If your foreign keys are not ended with 'id', you can specify the suffix you want here\r\n* rare_map_opts[foreign_key][alias]: If naming convention is not followed by some foreign keys, you can list them here\r\n* rare_map_opts[primary_key]: Usually rare_map can identify the primary key of a table, if it fails, please list primary keys here\r\n\r\n#### RareMap Options Precedence\r\n\r\nYou can place rare_map options in 3 ways\r\n```yaml\r\n  rare_map_opts:             # Global options\r\n    ...\r\n  group1:\r\n    -\r\n      rare_map_opts:         # Group options\r\n        ...\r\n    -\r\n      db1:\r\n        ...\r\n  legacy_db:\r\n    adapter: sqlite3\r\n    database: db/db.sqlite3\r\n    rare_map_opts:           # DB options\r\n      ...\r\n```\r\nPrecedence: DB > Group > Global\r\n\r\n\r\n## Copyright\r\n\r\nCopyright (c) 2013 Wei-Ming Wu. See LICENSE.txt for\r\nfurther details.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}